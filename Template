AWSTemplateFormatVersion: '2010-09-09'
Description: 'Deploy Lambda function to check AWS instances and set alarms'

Parameters:
  S3Bucket:
    Type: String
    Description: The S3 bucket where the Lambda function code is stored.
  S3Key:
    Type: String
    Description: The S3 key (file path) for the Lambda function code ZIP file.

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: 'LambdaExecutionPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:DescribeInstances'
                  - 'ec2:DescribeRegions'
                  - 'cloudwatch:PutMetricAlarm'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'sns:Publish'
                # Specify the ARN of the SNS topic here
                Resource: 'arn:aws:sns:region:account-id:topicname'
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                # Specify the S3 bucket ARN here, and add /* to allow access to all objects within the bucket
                Resource: !Sub 'arn:aws:s3:::${S3Bucket}/*'

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: 'index.handler' # This should match the handler in your Python script
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: 'python3.8'
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Ref S3Key
      Timeout: 300 # Timeout in seconds

  LambdaSchedule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: 'rate(24 hours)'
      Targets:
        - Arn: !GetAtt LambdaFunction.Arn
          Id: 'LambdaTarget'
          Input: '{}'

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt LambdaSchedule.Arn

Outputs:
  LambdaFunctionName:
    Description: 'Name of the Lambda function'
    Value: !Ref LambdaFunction
  LambdaFunctionARN:
    Description: 'ARN of the Lambda function'
    Value: !GetAtt LambdaFunction.Arn
